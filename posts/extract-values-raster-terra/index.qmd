---
title: "Extracting values from raster image using terra package in R"
author: "Nyamisi Peter"
date: "2024-05-10"
categories: [terra, visualization, code]
image: "fig-point.jpg"
bibliography: "../blog.bib"
---

# Introduction

When working with raster images, you may need to obtain the values of certain points from the raster for further analysis. This is often achieved by extracting specific values at particular points. The R packages **terra** [@terra24] and **tidyterra** [@tidyterra23] provide tools to efficient extract these values, whether you generate random points or have pre-defined locations. Below is a simplified overview of the process:

Before starting, ensure you have both **terra** and **tidyterra** installed and loaded into your R environment. Other packages such as **sf** also will be used in this post.


```{r}
#| warning: false
#| message: false
#| comment: ""
#| 
require(tidyterra)
require(terra)
require(sf)
require(tidyverse)

```

# Data

We will use chlorophyll-*a* data  collected along the Pemba Channel in Tanzania coastal waters. The data will be loaded using `rast()` function of **terra** package [@terra24].

```{r}
pemba = rast("pemba_crop.nc") |> 
  rename(flags = 1, chl = 2, land_mask = 3)

pemba
```

We may then plot our data and visualize the distribution of the values in a map;


```{r}
#| fig-width: 3.5
#| fig-height: 3.5
#| 
ggplot() +
  geom_spatraster(data = pemba |> 
                    filter(chl < 1) |> 
                    select(lyr = chl))+
  scale_fill_gradientn(colours = oce::oceColors9A(120))+
  coord_sf(expand = F) +
  theme(legend.position = "none",
        axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())

```

# Define your points

To generate random points within our water-covered study area, we will use the `spatSample()` function from the **terra** package. Focusing on the *chl* layer of our dataset, we will produce 100 random points using the `method = "random"` argument. To ensure that only points within the water body are considered, we will employ `na.rm = TRUE` to exclude any points falling on land where chlorophyll data is absent (represented as **NA**). The resulting output will be a **SpatVector** point geometry containing the generated 100 points and their corresponding chlorophyll values.

```{r}
 pemba.data = spatSample(pemba |> select(chl), 
                  size = 100, 
                  method = "random",
                  na.rm = T, 
                  as.points = T,
                  values = T)

pemba.data

```


## Plotting points 

Next, we will visualize our points on a map to observe their distribution. As shown in [@fig-map-point], all our randomly generated points fall within the water, with none located on land.


```{r}
#| label: fig-map-point
#| fig-cap: The map of Pemba Channel showing the generated random points
#| warning: false
#| message: false
#| fig-width: 3.5
#| fig-height: 3.5
#| comment: ""
#| 
ggplot()+
  ggspatial::annotation_map_tile(type = "osm", zoom = 8)+
  ggspatial::layer_spatial(data = pemba.data)+
  scale_x_continuous(breaks = seq(39.2,40,0.4), 
                     labels = metR::LonLabel(lon = seq(39.2,40,0.4)))+
  scale_y_continuous(breaks = seq(-5.6,-4.6,0.4),
                     labels = metR::LatLabel(lat = seq(-5.6,-4.6,0.4)))
```

The extracted spatvector points include chlorophyll values for each point, as illustrated in @fig-chl-value.


```{r}
#| label: fig-chl-value
#| fig-cap: The value of chlorophyll-a extracted from each generated random point
#| fig-width: 3.5
#| fig-height: 3.5
#| 
pemba.data |> 
  ggplot() +
  geom_spatvector(aes(color = chl, size = chl))+
  scale_x_continuous(breaks = seq(39.2,40,0.4), 
                     labels = metR::LonLabel(lon = seq(39.2,40,0.4)))+
  scale_y_continuous(breaks = seq(-5.6,-4.6,0.4),
                     labels = metR::LatLabel(lat = seq(-5.6,-4.6,0.4)))+
  theme_bw() 
  

```


# Extracting points as dataframe

Along with extracting your data in spatvector format, you may occasionally prefer to have your values in a dataframe. This can be achieved directly during data extraction. Instead of using the argument `as.point = T`, which returns the data as a *spatvector*, use the argument `as.df = T` to obtain the data in a *dataframe* format. Additionally, include the argument `xy = T` to capture the longitude and latitude coordinates for each point.


```{r}
pemba.df = spatSample(pemba |> select(chl), 
                  size = 200, 
                  method = "random",
                  na.rm = T, 
                  # as.points = T,
                  as.df = T,
                  values = T,
                  xy = T) |> 
  rename(lon = x, lat = y) |> 
  as_tibble()

pemba.df
```

Now that your points are in a dataframe, you can use them for any analysis you wish to conduct!


Thank you for following and do not miss the next post!!







## Consultated references

