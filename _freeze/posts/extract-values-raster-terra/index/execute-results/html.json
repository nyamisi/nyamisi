{
  "hash": "957c17c8daa4608a3f2f2f7f4d1a189e",
  "result": {
    "markdown": "---\ntitle: \"Extracting values from raster image using terra package in R\"\nauthor: \"Nyamisi Peter\"\ndate: \"2024-05-10\"\ncategories: [terra, visualization, code]\nimage: \"fig-point.jpg\"\nbibliography: \"../blog.bib\"\n---\n\n\n# Introduction\n\nWhen working with raster images, you may need to obtain the values of certain points from the raster for further analysis. This is often achieved by extracting specific values at particular points. The R packages **terra** [@terra24] and **tidyterra** [@tidyterra23] provide tools to efficient extract these values, whether you generate random points or have pre-defined locations. Below is a simplified overview of the process:\n\nBefore starting, ensure you have both **terra** and **tidyterra** installed and loaded into your R environment. Other packages such as **sf** also will be used in this post.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyterra)\nrequire(terra)\nrequire(sf)\nrequire(tidyverse)\n```\n:::\n\n\n# Data\n\nWe will use chlorophyll-*a* data  collected along the Pemba Channel in Tanzania coastal waters. The data will be loaded using `rast()` function of **terra** package [@terra24].\n\n\n::: {.cell}\n\n```{.r .cell-code}\npemba = rast(\"pemba_crop.nc\") |> \n  rename(flags = 1, chl = 2, land_mask = 3)\n\npemba\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 244, 244, 3  (nrow, ncol, nlyr)\nresolution  : 0.004496807, 0.004496807  (x, y)\nextent      : 38.90161, 39.99883, -5.699434, -4.602213  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : pemba_crop.nc \nnames       : flags, chl, land_mask \n```\n:::\n:::\n\n\nWe may then plot our data and visualize the distribution of the values in a map;\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_spatraster(data = pemba |> \n                    filter(chl < 1) |> \n                    select(lyr = chl))+\n  scale_fill_gradientn(colours = oce::oceColors9A(120))+\n  coord_sf(expand = F) +\n  theme(legend.position = \"none\",\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=336}\n:::\n:::\n\n\n# Define your points\n\nTo generate random points within our water-covered study area, we will use the `spatSample()` function from the **terra** package. Focusing on the *chl* layer of our dataset, we will produce 100 random points using the `method = \"random\"` argument. To ensure that only points within the water body are considered, we will employ `na.rm = TRUE` to exclude any points falling on land where chlorophyll data is absent (represented as **NA**). The resulting output will be a **SpatVector** point geometry containing the generated 100 points and their corresponding chlorophyll values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n pemba.data = spatSample(pemba |> select(chl), \n                  size = 100, \n                  method = \"random\",\n                  na.rm = T, \n                  as.points = T,\n                  values = T)\n\npemba.data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n class       : SpatVector \n geometry    : points \n dimensions  : 100, 1  (geometries, attributes)\n extent      : 39.04326, 39.98309, -5.697185, -4.635939  (xmin, xmax, ymin, ymax)\n coord. ref. : lon/lat WGS 84 \n names       :    chl\n type        :  <num>\n values      : 0.2281\n               0.1174\n               0.1519\n```\n:::\n:::\n\n\n\n## Plotting points \n\nNext, we will visualize our points on a map to observe their distribution. As shown in [@fig-map-point], all our randomly generated points fall within the water, with none located on land.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  ggspatial::annotation_map_tile(type = \"osm\", zoom = 8)+\n  ggspatial::layer_spatial(data = pemba.data)+\n  scale_x_continuous(breaks = seq(39.2,40,0.4), \n                     labels = metR::LonLabel(lon = seq(39.2,40,0.4)))+\n  scale_y_continuous(breaks = seq(-5.6,-4.6,0.4),\n                     labels = metR::LatLabel(lat = seq(-5.6,-4.6,0.4)))\n```\n\n::: {.cell-output-display}\n![The map of Pemba Channel showing the generated random points](index_files/figure-html/fig-map-point-1.png){#fig-map-point width=336}\n:::\n:::\n\n\nThe extracted spatvector points include chlorophyll values for each point, as illustrated in @fig-chl-value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npemba.data |> \n  ggplot() +\n  geom_spatvector(aes(color = chl, size = chl))+\n  scale_x_continuous(breaks = seq(39.2,40,0.4), \n                     labels = metR::LonLabel(lon = seq(39.2,40,0.4)))+\n  scale_y_continuous(breaks = seq(-5.6,-4.6,0.4),\n                     labels = metR::LatLabel(lat = seq(-5.6,-4.6,0.4)))+\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![The value of chlorophyll-a extracted from each generated random point](index_files/figure-html/fig-chl-value-1.png){#fig-chl-value width=336}\n:::\n:::\n\n\n\n# Extracting points as dataframe\n\nAlong with extracting your data in spatvector format, you may occasionally prefer to have your values in a dataframe. This can be achieved directly during data extraction. Instead of using the argument `as.point = T`, which returns the data as a *spatvector*, use the argument `as.df = T` to obtain the data in a *dataframe* format. Additionally, include the argument `xy = T` to capture the longitude and latitude coordinates for each point.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npemba.df = spatSample(pemba |> select(chl), \n                  size = 200, \n                  method = \"random\",\n                  na.rm = T, \n                  # as.points = T,\n                  as.df = T,\n                  values = T,\n                  xy = T) |> \n  rename(lon = x, lat = y) |> \n  as_tibble()\n\npemba.df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 3\n     lon   lat   chl\n   <dbl> <dbl> <dbl>\n 1  39.4 -4.90 0.145\n 2  39.4 -5.49 0.135\n 3  39.5 -5.30 0.149\n 4  39.5 -5.67 0.125\n 5  39.5 -5.25 0.138\n 6  39.2 -5.31 0.152\n 7  39.4 -5.02 0.118\n 8  39.6 -5.67 0.143\n 9  39.3 -5.54 0.169\n10  39.3 -5.66 0.175\n# ℹ 190 more rows\n```\n:::\n:::\n\n\nNow that your points are in a dataframe, you can use them for any analysis you wish to conduct!\n\n\nThank you for following and do not miss the next post!!\n\n\n\n\n\n\n\n## Consultated references\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}