{
  "hash": "ec1c6f6944091caa29031c80e6824917",
  "result": {
    "markdown": "---\ntitle: \"Deploying and publishing to GitHub\"\nauthor: \"Nyamisi Peter\"\ndate: \"2023-03-07\"\ncategories: [code]\nimage: \"deployment-process.jpg\"\nbibliography: \"../blog.bib\"\n---\n\n\n# GitHub\n\nGitHub is a web-based platform that provides version control and collaborative software development services. It is primarily used for source code management and version control. GitHub also provides features such as bug tracking, task management, and project wikis.\n\nGitHub allows developers to collaborate on projects with other developers around the world. Users can create and manage their own repositories, which are collections of files and folders that are tracked by Git, a distributed version control system. Developers can then use Git to make changes to the codebase, track those changes over time, and collaborate with others on the same codebase.\n\nGitHub also provides a social networking aspect, allowing users to follow other developers and organizations, explore popular repositories, and contribute to open source projects. It is widely used in the software development community, with millions of users and tens of millions of repositories.\n\nIn addition to its core features, GitHub also offers additional services such as GitHub Pages, which allows users to host static websites on the platform, and GitHub Actions, which provides continuous integration and continuous deployment services.\n\n## Benefits of using GitHub \n\nDeploying to GitHub has several benefits, including:\n\n1. **Version control**: GitHub provides an easy-to-use platform for version control, which allows you to track changes to your code over time and collaborate with other developers.\n\n1. **Free hosting**: GitHub offers free hosting for static websites through its GitHub Pages service. This means you can host your website on GitHub without having to pay for hosting services.\n\n1. **Accessibility**: GitHub is widely used by developers around the world, which means your code and website are accessible to a large audience. It also makes it easy for others to contribute to your project.\n\n1. **Showcase your work**: GitHub provides a platform to showcase your work to potential employers or clients. You can also use GitHub to build a portfolio of your work, which can be a valuable asset in your career.\n\n1. **Continuous integration**: GitHub supports continuous integration, which allows you to automatically build and deploy your code whenever changes are made. This can save time and effort in the deployment process.\n\nGenerally, deploying to GitHub can help streamline the development process, provide a platform to showcase your work, and offer free hosting for your projects.\n\n## GitHub deployment steps\n\nDeploying to GitHub typically involves the following steps:\n\nFirst, create a GitHub account: If you don't already have one. You may create an account by opening GitHub page at [GitHub](https://github.com) which will open as in @fig-gitHubsignUp. This will take you to the signup page at [GitHubSignUp](https://github.com/signup). Click the signup button and fill in your particulars\n\n![](github-signup.jpg)\n\n\n\nAfter you have already created an account, create a new repository in GitHub from which you will deploy your work: Navigate to the GitHub homepage and click the **New Repository** button in the top-right corner of the page. This will open a new window (@fig-newRepository). Give your repository a name; I have named my repository as github-deployment. Choose whether it should be public or private, and add a description if you like.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"new-repository.jpg\")\n```\n\n::: {.cell-output-display}\n![Creating a new repository in GitHub](new-repository.jpg){#fig-newRepository width=400}\n:::\n:::\n\n\n\n\nInitialize Git: In your local development environment (Local Host) by opening the GitBash (@fig-deployment-steps). Navigate to the directory where your project is located in your local host using `cd` function of the GitBash. Run the command `git init` to initialize Git. Check the status of your work by running `git status` in GitBash. It is adviced to check the status of your work after every step before proceeding to the new step to crosscheck if there is no any error or mistake made in the previous step\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"deployment-process.jpg\")\n```\n\n::: {.cell-output-display}\n![Steps in GitHub deployment](deployment-process.jpg){#fig-deployment-steps width=400}\n:::\n:::\n\n\nAdd files to the repository: Use the `git add` command to add the files you want to include in your repository. You can use the command `git add .` (add .(period)) to add all the files in your current directory. Check for status of your work\n\nCommit changes: Use the `git commit` command to commit your changes to the repository (@fig-deployment-steps). Remember to include a descriptive commit message to explain what changes you made. Check for the status of your work\n\nAdd the remote repository: Use the command `git remote add origin` https://github.com/your-username/your-repository.git to add the remote repository as the origin. Check for status of your work\n\nIf the working tree is clean, Push changes to the remote repository: Use the command `git push -u origin main` to push your changes to the remote repository. The -u flag sets the upstream branch to main, which means you'll only need to run git push in the future to push changes.\n\nVerify deployment: Once you've pushed your changes, navigate to your repository on GitHub and verify that the changes have been deployed successfully.\n\n\nThat's it! Your project is now deployed to GitHub.\n\n\nIf you will make changes to you project after first commit, then you will only run three steps to make those changes to your GitHub repository; add, commit and push\n\nAdd all your files in the working directory using `git add .`\n\nCommit changes to your repository using `git commit -m` \"Add commit message\"\n\npush your work using `git push`\n\nNavigate to your repository on GitHub and verify that the changes have been deployed successfully.\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}